<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eun.tutorial.mapper.main.PostMapper">
    
    <resultMap id="postResultMap" type="com.eun.tutorial.dto.main.PostDTO">
        <id property="id" column="id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="isSecret" column="is_secret" />
        <result property="openDate" column="open_date" />
        <result property="visibility" column="visibility" />
        <result property="postType" column="post_type" />
        <result property="creat_id" column="createId" />
        <result property="created_at" column="created_at" />
    </resultMap>

	<select id="selectPosts" parameterType="java.util.HashMap" resultMap="postResultMap">
	    SELECT
	        id,
	        title,
	        content,
	        secret,
	        open_date,
	        visibility,
	        post_type,
	        create_id,
	        created_at
	    FROM
	        posts
	    WHERE del_yn=0
	            AND (TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') &gt;= TO_CHAR(open_date, 'YYYY-MM-DD')
	            OR create_id = #{loginId})
	            AND (visibility &lt;&gt; '1R' OR create_id = #{loginId})
	        <if test="search.title != null and search.title.value != ''">
	            AND LOWER(title) LIKE '%'||LOWER(#{search.title.value})||'%'
	        </if>
		    <if test="search.startDate != null and search.startDate.value != ''">
		      	AND TO_CHAR(created_at, 'YYYY-MM-DD') &gt;= #{search.startDate.value}
		    </if>
		    <if test="search.endDate != null and search.endDate.value != ''">
		      	AND TO_CHAR(created_at, 'YYYY-MM-DD') &lt;= #{search.endDate.value}
		    </if>	
		    <if test="search.visibility != null and search.visibility.value != ''">
		      	AND visibility = #{search.visibility.value}
		    </if>	        
		    <if test="search.postType != null and search.postType.value != null and search.postType.value != ''">
		      	AND post_type = #{search.postType.value}
		    </if>	  
		    <if test="search.createId != null and search.createId.value != ''">
		      	AND LOWER(create_id) LIKE '%'||LOWER(#{search.createId.value})||'%'
		    </if>			          
	    ORDER BY ${orderColumnName} ${orderDirection}
	    OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select>
	
	<update id="mergePost" parameterType="com.eun.tutorial.dto.main.PostDTO">
	    MERGE INTO posts
	    USING DUAL 
	    	ON ( id = #{id} ) 
	    WHEN MATCHED THEN
	        UPDATE SET
	            title = #{title},
	            content = #{content},
	            secret = #{isSecret},
	            visibility = #{visibility},
	        	post_type = #{postType},
	            open_date = NVL(#{openDate}, CURRENT_DATE),
	            create_id = #{createId}, 
	            created_at = CURRENT_TIMESTAMP
	    WHEN NOT MATCHED THEN
	        INSERT (id, title, content, secret, visibility, open_date, post_type)
	        VALUES (#{id}, #{title}, EMPTY_CLOB(), #{isSecret}, #{visibility}, NVL(#{openDate}, CURRENT_DATE), #{postType})
	</update>
	
    
	<update id="update"> 
		UPDATE posts SET title=#{title},
						 secret=#{isSecret},
						 visibility = #{visibility},
	        			 post_type = #{postType},
	            		 open_date = #{openDate}
		WHERE id = #{id}
	</update>    

    <select id="getTotalCount" parameterType="java.util.HashMap" resultType="int">
        SELECT
            COUNT(*)
        FROM
            posts
        WHERE del_yn=0
	            AND (TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') &gt;= TO_CHAR(open_date, 'YYYY-MM-DD')
	            OR create_id = #{loginId})
	        <if test="search.title != null and search.title.value != ''">
	            AND LOWER(title) LIKE '%'||LOWER(#{search.title.value})||'%'
	        </if>
		    <if test="search.startDate != null and search.startDate.value != ''">
		      	AND TO_CHAR(created_at, 'YYYY-MM-DD') &gt;= #{search.startDate.value}
		    </if>
		    <if test="search.endDate != null and search.endDate.value != ''">
		      	AND TO_CHAR(created_at, 'YYYY-MM-DD') &lt;= #{search.endDate.value}
		    </if>	
		    <if test="search.visibility != null and search.visibility.value != ''">
		      	AND visibility = #{search.visibility.value}
		    </if>	        
		    <if test="search.postType != null and search.postType.value != null and search.postType.value != ''">
		      	AND post_type = #{search.postType.value}
		    </if>	  
		    <if test="search.createId != null and search.createId.value != ''">
		      	AND LOWER(create_id) LIKE '%'||LOWER(#{search.createId.value})||'%'
		    </if>	    	    
    </select>
    
	<delete id="delete"> 
		UPDATE posts SET del_yn=1 WHERE id = #{id}
	</delete>  
	
	<select id="findById" resultType="com.eun.tutorial.dto.main.PostDTO">
		SELECT
	        id,
	        title,
	        content,
	        secret,
	        open_date,
	        visibility,
	        post_type,
	        create_id,
	        created_at
	    FROM
	        posts
	    WHERE id = #{id}
	    AND del_yn=0
	</select>	 
	
	<update id="mergeComment" parameterType="com.eun.tutorial.dto.main.CommentDTO">
	  MERGE INTO comments c
	  USING DUAL
	  ON (c.id = #{id})
	  WHEN MATCHED THEN
	    UPDATE SET
	      c.content = #{content}
	  WHEN NOT MATCHED THEN
	    INSERT (post_id, content, create_id)
	    VALUES (#{postId}, #{content}, #{createId})
	</update>

	<select id="findCommentsById" resultType="com.eun.tutorial.dto.main.CommentDTO">
	  SELECT id, post_id, content, created_at, del_yn, create_id
	  FROM comments
	  WHERE post_id = #{postId} 
	  AND del_yn = 0
	  ORDER BY created_at DESC
	</select>
	
	<delete id="deleteComment"> 
		UPDATE comments SET del_yn=1, created_at = CURRENT_TIMESTAMP WHERE id = #{id} and create_id = #{currentUserId}
	</delete>	
	   

</mapper>

